CREATE  TABLE "public".t_user (
                                  id                   uuid  NOT NULL  ,
                                  provider_id          varchar NOT NULL UNIQUE,
                                  username             varchar(20) NOT NULL UNIQUE ,
                                  display_name         varchar(20)  NOT NULL    ,
                                  mobile_number        varchar(50)    ,
                                  email                text NOT NULL UNIQUE ,
                                  profile_bio          text    ,
                                  profile_image_url    text    ,
                                  created_at           timestamp    ,
                                  updated_at           timestamp    ,
                                  CONSTRAINT pk_t_user PRIMARY KEY ( id )
);
CREATE INDEX idx_user_username ON "public".t_user( username );
CREATE INDEX idx_user_provider_id ON "public".t_user( provider_id );



CREATE  TABLE "public".t_friendships (
                                         id                   bigint generated by default as identity NOT NULL ,
                                         friend_a             uuid  NOT NULL  ,
                                         friend_b             uuid  NOT NULL  ,
                                         created_at           timestamp    ,
                                         CONSTRAINT pk_t_friendships PRIMARY KEY ( id ),
                                         CONSTRAINT unq_friend_a_friend_b UNIQUE(friend_a, friend_b),
                                         CONSTRAINT chk_no_self_friendship CHECK(friend_a <> friend_b),
                                         CONSTRAINT fk_t_friendships_friend_a FOREIGN KEY ( friend_a ) REFERENCES "public".t_user( id ),
                                         CONSTRAINT fk_t_friendships_friend_b FOREIGN KEY ( friend_b ) REFERENCES "public".t_user( id )
);

CREATE INDEX idx_friend_a ON "public".t_friendships( friend_a );
CREATE INDEX idx_friend_b ON "public".t_friendships( friend_b );




CREATE  TABLE "public".t_friend_requests (
                                         id                   bigint generated by default as identity NOT NULL ,
                                         initiator            uuid  NOT NULL  ,
                                         receiver             uuid  NOT NULL  ,
                                         created_at           timestamp    ,
                                         CONSTRAINT pk_t_friend_request_id PRIMARY KEY ( id ),
                                         CONSTRAINT unq_initiator_receiver UNIQUE(initiator, receiver),
                                         CONSTRAINT chk_no_self_friend_request CHECK(initiator <> receiver),
                                         CONSTRAINT fk_t_friend_requests_initiator FOREIGN KEY ( initiator ) REFERENCES "public".t_user( id ),
                                         CONSTRAINT fk_t_friend_requests_receiver FOREIGN KEY ( receiver ) REFERENCES "public".t_user( id )
);

CREATE INDEX idx_friend_request_initiator ON "public".t_friend_requests( initiator );
CREATE INDEX idx_friend_request_receiver ON "public".t_friend_requests( receiver );




CREATE  TABLE "public".t_user_friendship_preference (
                                                        id                   bigint generated by default as identity NOT NULL ,
                                                        user_id              uuid  NOT NULL  ,
                                                        friend_id            uuid  NOT NULL  ,
                                                        is_blocked           boolean DEFAULT false   ,
                                                        is_muted             boolean DEFAULT false   ,
                                                        is_pinned            boolean DEFAULT false   ,
                                                        created_at           timestamp  NOT NULL  ,
                                                        updated_at           timestamp    ,
                                                        CONSTRAINT pk_t_user_friendship_preference PRIMARY KEY ( id ),
                                                        CONSTRAINT unq_user_id_friend_id UNIQUE(user_id, friend_id),
                                                        CONSTRAINT chk_no_self_friendship_preference CHECK ( user_id <> friend_id ),
                                                        CONSTRAINT fk_t_user_friendship_preference_user_id FOREIGN KEY ( user_id ) REFERENCES "public".t_user( id ),
                                                        CONSTRAINT fk_t_user_friendship_preference_friend_id FOREIGN KEY ( friend_id ) REFERENCES "public".t_user( id )
);

CREATE INDEX idx_user_friendship_preference_user_id ON "public".t_user_friendship_preference( user_id );
CREATE INDEX idx_user_friendship_preference_friend_id ON "public".t_user_friendship_preference( friend_id );
COMMENT ON TABLE "public".t_user_friendship_preference IS 'Allows a user to personalize the friendship option, Mute, Pin, Blocked...';



